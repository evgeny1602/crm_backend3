import {MigrationInterface, QueryRunner} from "typeorm";

export class NullableColumns1625215844557 implements MigrationInterface {
    name = 'NullableColumns1625215844557'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "temporary_tasks" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar NOT NULL, "start_datetime" datetime NOT NULL, "end_datetime" datetime, "done_datetime" datetime, "tasktypeId" integer, "masterUserId" integer, "createUserId" integer, "dealId" integer, "clientId" integer, CONSTRAINT "FK_4e7cd3aff0dbd7708e02b14ecb8" FOREIGN KEY ("clientId") REFERENCES "clients" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT "FK_4d5c77e1b081638da5c4248ac4a" FOREIGN KEY ("dealId") REFERENCES "deals" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT "FK_9c7f281292617cf9ac7d2c57a61" FOREIGN KEY ("createUserId") REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE NO ACTION, CONSTRAINT "FK_0312e4b3f590f83f0c80fb951bb" FOREIGN KEY ("masterUserId") REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE NO ACTION, CONSTRAINT "FK_7fd16101aa628a5d5938b26e927" FOREIGN KEY ("tasktypeId") REFERENCES "tasktypes" ("id") ON DELETE SET NULL ON UPDATE NO ACTION)`);
        await queryRunner.query(`INSERT INTO "temporary_tasks"("id", "description", "start_datetime", "end_datetime", "done_datetime", "tasktypeId", "masterUserId", "createUserId", "dealId", "clientId") SELECT "id", "description", "start_datetime", "end_datetime", "done_datetime", "tasktypeId", "masterUserId", "createUserId", "dealId", "clientId" FROM "tasks"`);
        await queryRunner.query(`DROP TABLE "tasks"`);
        await queryRunner.query(`ALTER TABLE "temporary_tasks" RENAME TO "tasks"`);
        await queryRunner.query(`CREATE TABLE "temporary_deals" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar NOT NULL, "amount" integer NOT NULL, "start_datetime" datetime NOT NULL, "end_datetime" datetime, "done_datetime" datetime, "dealtypeId" integer, "clientId" integer, "workerUserId" integer, "doneUserId" integer, CONSTRAINT "FK_f80750134cb0a6049fb5f85a866" FOREIGN KEY ("doneUserId") REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE NO ACTION, CONSTRAINT "FK_f7c4a36cfb54302fbd9e893a041" FOREIGN KEY ("workerUserId") REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE NO ACTION, CONSTRAINT "FK_4b96d900e3f444e2554042f8a56" FOREIGN KEY ("clientId") REFERENCES "clients" ("id") ON DELETE SET NULL ON UPDATE NO ACTION, CONSTRAINT "FK_7fd58c2891708ea6cc46fff5e95" FOREIGN KEY ("dealtypeId") REFERENCES "dealtypes" ("id") ON DELETE SET NULL ON UPDATE NO ACTION)`);
        await queryRunner.query(`INSERT INTO "temporary_deals"("id", "description", "amount", "start_datetime", "end_datetime", "done_datetime", "dealtypeId", "clientId", "workerUserId", "doneUserId") SELECT "id", "description", "amount", "start_datetime", "end_datetime", "done_datetime", "dealtypeId", "clientId", "workerUserId", "doneUserId" FROM "deals"`);
        await queryRunner.query(`DROP TABLE "deals"`);
        await queryRunner.query(`ALTER TABLE "temporary_deals" RENAME TO "deals"`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "deals" RENAME TO "temporary_deals"`);
        await queryRunner.query(`CREATE TABLE "deals" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar NOT NULL, "amount" integer NOT NULL, "start_datetime" datetime NOT NULL, "end_datetime" datetime NOT NULL, "done_datetime" datetime NOT NULL, "dealtypeId" integer, "clientId" integer, "workerUserId" integer, "doneUserId" integer, CONSTRAINT "FK_f80750134cb0a6049fb5f85a866" FOREIGN KEY ("doneUserId") REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE NO ACTION, CONSTRAINT "FK_f7c4a36cfb54302fbd9e893a041" FOREIGN KEY ("workerUserId") REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE NO ACTION, CONSTRAINT "FK_4b96d900e3f444e2554042f8a56" FOREIGN KEY ("clientId") REFERENCES "clients" ("id") ON DELETE SET NULL ON UPDATE NO ACTION, CONSTRAINT "FK_7fd58c2891708ea6cc46fff5e95" FOREIGN KEY ("dealtypeId") REFERENCES "dealtypes" ("id") ON DELETE SET NULL ON UPDATE NO ACTION)`);
        await queryRunner.query(`INSERT INTO "deals"("id", "description", "amount", "start_datetime", "end_datetime", "done_datetime", "dealtypeId", "clientId", "workerUserId", "doneUserId") SELECT "id", "description", "amount", "start_datetime", "end_datetime", "done_datetime", "dealtypeId", "clientId", "workerUserId", "doneUserId" FROM "temporary_deals"`);
        await queryRunner.query(`DROP TABLE "temporary_deals"`);
        await queryRunner.query(`ALTER TABLE "tasks" RENAME TO "temporary_tasks"`);
        await queryRunner.query(`CREATE TABLE "tasks" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar NOT NULL, "start_datetime" datetime NOT NULL, "end_datetime" datetime NOT NULL, "done_datetime" datetime NOT NULL, "tasktypeId" integer, "masterUserId" integer, "createUserId" integer, "dealId" integer, "clientId" integer, CONSTRAINT "FK_4e7cd3aff0dbd7708e02b14ecb8" FOREIGN KEY ("clientId") REFERENCES "clients" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT "FK_4d5c77e1b081638da5c4248ac4a" FOREIGN KEY ("dealId") REFERENCES "deals" ("id") ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT "FK_9c7f281292617cf9ac7d2c57a61" FOREIGN KEY ("createUserId") REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE NO ACTION, CONSTRAINT "FK_0312e4b3f590f83f0c80fb951bb" FOREIGN KEY ("masterUserId") REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE NO ACTION, CONSTRAINT "FK_7fd16101aa628a5d5938b26e927" FOREIGN KEY ("tasktypeId") REFERENCES "tasktypes" ("id") ON DELETE SET NULL ON UPDATE NO ACTION)`);
        await queryRunner.query(`INSERT INTO "tasks"("id", "description", "start_datetime", "end_datetime", "done_datetime", "tasktypeId", "masterUserId", "createUserId", "dealId", "clientId") SELECT "id", "description", "start_datetime", "end_datetime", "done_datetime", "tasktypeId", "masterUserId", "createUserId", "dealId", "clientId" FROM "temporary_tasks"`);
        await queryRunner.query(`DROP TABLE "temporary_tasks"`);
    }

}
